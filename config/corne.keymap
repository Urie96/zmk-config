#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define BASE 0
#define NUM 1
#define ARROW 2
#define SYS 3
#define HYPER 5

/* Global settings */

&sk {  // sticky-key config
    release-after-ms = <3000>;
    quick-release;             // no double capitalization when rolling keys
};

&lt {
    flavor = "hold-preferred";
};

&caps_word {
    /delete-property/ ignore-modifiers;
};

&led_strip {
    // chain-length = <21>;
};

&nice_view_spi {
    // cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

// ZMK_CONDITIONAL_LAYER(1 0, 0)

ZMK_BEHAVIOR(tap, macro_one_param,
    bindings = 
      <&macro_param_1to1>,
      <&macro_tap>,
      <&kp MACRO_PLACEHOLDER>;
)

ZMK_BEHAVIOR(youl, macro, bindings = <&kp Y &kp O &kp U &kp L &kp I>;)

#define MAKE_HT(name, hold_bind, tap_bind) \
    ZMK_BEHAVIOR(name, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <200>; \
        require-prior-idle-ms = <125>; \
        bindings = <hold_bind>, <tap_bind>; \
    )

#define MAKE_MT(name, hold_bind, tap_bind) \
    ZMK_BEHAVIOR(name, hold_tap, \
        flavor = "hold-preferred"; \
        tapping-term-ms = <200>; \
        bindings = <hold_bind>, <tap_bind>; \
    )

MAKE_HT(ht, &tap, &kp)
MAKE_MT(mt_smart_shft, &kp, &smart_shft)

#define MT_SMART_SHFT(mod_key) &mt_smart_shft mod_key 0

#define MAKE_HT_PAIR(NAME, L_KEY, R_KEY) \
    ZMK_BEHAVIOR(p_ ## NAME, macro, bindings = <&kp L_KEY &kp R_KEY &kp LEFT>;) \
    MAKE_HT(ht_ ## NAME, &p_ ## NAME, &kp)

MAKE_HT_PAIR(bkt, LBKT, RBKT)
MAKE_HT_PAIR(brc, LBRC, RBRC)
MAKE_HT_PAIR(par, LPAR, RPAR)
MAKE_HT_PAIR(sqt, SQT, SQT)
MAKE_HT_PAIR(dqt, DQT, DQT)

#define HT_BKT &ht_bkt 0 LBKT
#define HT_BRC &ht_brc 0 LBRC
#define HT_PAR &ht_par 0 LPAR
#define HT_SQT &ht_sqt 0 SQT
#define HT_DQT &ht_dqt 0 DQT

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

/*                KEY POSITIONS

  ╭─────────────────────╮ ╭─────────────────────╮
  │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
  │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
  │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────╯
          ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#undef COMBO_TERM
#define COMBO_TERM 20

ZMK_COMBO(bkt, HT_BKT, RT1 RT2, BASE)
ZMK_COMBO(brc, HT_BRC, RM1 RM2, BASE)
ZMK_COMBO(par, HT_PAR, RB1 RB2, BASE)
ZMK_COMBO(sqt, HT_SQT, LT1 LT2, BASE)
ZMK_COMBO(dqt, HT_DQT, LM1 LM2, BASE)

#define XXX &none
#define ___ &trans
#define AS(key) &ht LS(key) key
#define KP(key) &kp key
#define MT(mod_key,tap_key) &mt mod_key tap_key
#define LT_NUM(tap_key) &lt NUM tap_key
#define LT_ARROW(tap_key) &lt ARROW tap_key
#define LT_SYS(tap_key) &lt SYS tap_key
#define LT_HYPER(tap_key) &lt HYPER tap_key

ZMK_LAYER(base,
    XXX AS(Q) AS(W) AS(E) AS(R) AS(T)                   AS(Y) AS(U) AS(I) AS(O) AS(P) XXX
    XXX AS(A) AS(S) AS(D) AS(F) AS(G)                   AS(H) AS(J) AS(K) AS(L) AS(SEMI) XXX
    XXX AS(Z) AS(X) AS(C) AS(V) AS(B)                   AS(N) AS(M) AS(COMMA) AS(DOT) AS(FSLH) XXX
    MT(LALT,TAB) MT_SMART_SHFT(LGUI) LT_NUM(SPACE)      LT_ARROW(ENTER) MT(RCTRL,ESC) KP(BSPC)
)

ZMK_LAYER(num,
    XXX KP(GRAVE) KP(PRCNT) KP(EQUAL) KP(MINUS) KP(AT)    AS(GRAVE) KP(N7) KP(N8) KP(N9) KP(BSLH) XXX
    XXX ___ ___ MT(LSHFT,PLUS) MT(LCTRL,UNDER) KP(EXCL)   KP(CARET) MT(RCMD,N4) MT(RALT,N5) KP(N6) KP(DOT) XXX
    XXX ___ ___ KP(STAR) KP(AMPS) KP(PIPE)                KP(DLLR) KP(N1) KP(N2) KP(N3) KP(COMMA) XXX
    ___ ___ ___                                           LT_HYPER(LG(SPACE)) KP(N0) ___
)

ZMK_LAYER(arrow,
    XXX AS(F1) AS(F2) AS(F3) AS(F4) AS(F5)                XXX KP(HOME) KP(UP) KP(END) XXX XXX
    XXX AS(F6) AS(F7) MT(LSHFT,F8) MT(LCTRL,F9) AS(F10)   &smart_shft KP(LEFT) KP(DOWN) KP(RIGHT) XXX XXX
    XXX AS(F11) AS(F12) AS(F13) AS(F14) AS(F15)           XXX KP(PG_UP) XXX KP(PG_DN) XXX XXX
    ___ ___ LT_HYPER(LG(SPACE))                           ___ ___ ___
)

#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

ZMK_LAYER(sys,
    XXX  _BT_SEL_KEYS_                    XXX XXX XXX XXX XXX XXX
    XXX XXX XXX XXX XXX XXX               KP(C_PP) KP(C_PREV) KP(C_NEXT) XXX XXX XXX
    XXX XXX XXX XXX XXX XXX               KP(K_MUTE) KP(C_VOL_DN) KP(C_VOL_UP) KP(C_BRI_DN) KP(C_BRI_UP) XXX
    &out OUT_TOG &sys_reset &bootloader   &bootloader &sys_reset XXX
)

#define HYP(key) AS(RG(RA(RC(key))))

ZMK_LAYER(hyper,
    XXX HYP(Q) HYP(W) HYP(E) HYP(R) HYP(T)   HYP(Y) HYP(U) HYP(I) HYP(O) HYP(P) XXX
    XXX HYP(A) HYP(S) HYP(D) HYP(F) HYP(G)   HYP(H) HYP(J) HYP(K) HYP(L) HYP(SEMI) XXX
    XXX HYP(Z) HYP(X) HYP(C) HYP(V) HYP(B)   &youl HYP(M) HYP(COMMA) HYP(DOT) HYP(FSLH) XXX
    ___ ___ ___                              ___ ___ ___
)

