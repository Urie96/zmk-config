#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/* activate bluetooth */
#define ENABLE_WIRELESS 1

/* activate mouse */
#define ENABLE_MOUSE 1

#if ENABLE_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define BASE 0
#define NUM 1
#define ARROW 2
#define SYS 3
#define MOUSE 4

/* Global settings */

&sk {  // sticky-key config
    release-after-ms = <3000>;
    quick-release;             // no double capitalization when rolling keys
};

&lt {
    flavor = "hold-preferred";
};

&caps_word {
    /delete-property/ ignore-modifiers;
};

&led_strip {
    // chain-length = <21>;
};

&nice_view_spi {
    // cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

// ZMK_CONDITIONAL_LAYER(1 0, 0)

ZMK_BEHAVIOR(hyper, macro,
    bindings =
      <&to BASE>,
      <&macro_press &kp RGUI &kp RALT &kp RCTRL>,
      <&macro_pause_for_release>,
      <&macro_release &kp RGUI &kp RALT &kp RCTRL>;
)

ZMK_BEHAVIOR(tap, macro_one_param,
    bindings = 
      <&macro_param_1to1>,
      <&macro_tap>,
      <&kp MACRO_PLACEHOLDER>;
)

#define MAKE_HT(name, hold_bind, tap_bind) \
    ZMK_BEHAVIOR(name, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <200>; \
        require-prior-idle-ms = <125>; \
        bindings = <hold_bind>, <tap_bind>; \
    )

MAKE_HT(ht, &tap, &kp)
MAKE_HT(mt_hyper, &hyper, &kp)
MAKE_HT(mt_smart_shft, &kp, &smart_shft)

#define MT_HYPER(tap_key) &mt_hyper 0 tap_key
#define MT_SMART_SHFT(mod_key) &mt_smart_shft mod_key 0


#define MAKE_HT_PAIR(NAME, L_KEY, R_KEY) \
    ZMK_BEHAVIOR(p_ ## NAME, macro, bindings = <&kp L_KEY &kp R_KEY &kp LEFT>;) \
    MAKE_HT(ht_ ## NAME, &p_ ## NAME, &kp)

MAKE_HT_PAIR(bkt, LBKT, RBKT)
MAKE_HT_PAIR(brc, LBRC, RBRC)
MAKE_HT_PAIR(par, LPAR, RPAR)
MAKE_HT_PAIR(sqt, SQT, SQT)
MAKE_HT_PAIR(dqt, DQT, DQT)

#define HT_BKT &ht_bkt 0 LBKT
#define HT_BRC &ht_brc 0 LBRC
#define HT_PAR &ht_par 0 LPAR
#define HT_SQT &ht_sqt 0 SQT
#define HT_DQT &ht_dqt 0 DQT

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

/*                KEY POSITIONS

  ╭─────────────────────╮ ╭─────────────────────╮
  │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
  │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
  │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────╯
          ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#undef COMBO_TERM
#define COMBO_TERM 20

ZMK_COMBO(bkt, HT_BKT, RT1 RT2, 0)
ZMK_COMBO(brc, HT_BRC, RM1 RM2, 0)
ZMK_COMBO(par, HT_PAR, RB1 RB2, 0)
ZMK_COMBO(sqt, HT_SQT, LT1 LT2, 0)
ZMK_COMBO(dqt, HT_DQT, LM1 LM2, 0)

#define XXX &none
#define ___ &trans
#define AS(key) &ht LS(key) key
#define KP(key) &kp key
#define MT(mod_key,tap_key) &mt mod_key tap_key
#define LT_NUM(tap_key) &lt NUM tap_key
#define LT_ARROW(tap_key) &lt ARROW tap_key
#define LT_SYS(tap_key) &lt SYS tap_key

#if ENABLE_MOUSE
    #include "mouse.dtsi"
    // smart-mouse, requires PR #1366
    ZMK_BEHAVIOR(smart_mouse, tri_state,
        bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
        ignored-key-positions = <RT1 RT2 RT3 RM1 RM2 RM3 LH1>;
        ignored-layers = <MOUSE>;
    )
    MAKE_HT(mt_hyper_mouse, &hyper, &smart_mouse)
    #define MT_HYPER_MOUSE &mt_hyper_mouse 0 0

    ZMK_BEHAVIOR(u_left, mod_morph,
        bindings = <U_MS_L>, <U_WH_L>;
        mods = <(MOD_LGUI)>;
    )

    ZMK_BEHAVIOR(u_right, mod_morph,
        bindings = <U_MS_R>, <U_WH_R>;
        mods = <(MOD_LGUI)>;
    )

    ZMK_BEHAVIOR(u_up, mod_morph,
        bindings = <U_MS_U>, <U_WH_U>;
        mods = <(MOD_LGUI)>;
    )

    ZMK_BEHAVIOR(u_down, mod_morph,
        bindings = <U_MS_D>, <U_WH_D>;
        mods = <(MOD_LGUI)>;
    )
#else
    #define MT_HYPER_MOUSE MT_HYPER(LG(SPACE))
#endif


ZMK_LAYER(base,
    XXX AS(Q) AS(W) AS(E) AS(R) AS(T)                AS(Y) AS(U) AS(I) AS(O) AS(P) XXX
    XXX AS(A) AS(S) AS(D) AS(F) AS(G)                AS(H) AS(J) AS(K) AS(L) AS(SEMI) XXX
    XXX AS(Z) AS(X) AS(C) AS(V) AS(B)                AS(N) AS(M) AS(COMMA) AS(DOT) AS(FSLH) XXX
    MT(LALT,TAB) MT_SMART_SHFT(LGUI) LT_NUM(SPACE)   LT_ARROW(ENTER) MT(RCTRL,ESC) KP(BSPC)
)

ZMK_LAYER(num,
    XXX KP(N1) KP(N2) KP(N3) KP(N4) KP(N5)                   AS(GRAVE) KP(MINUS) KP(EQUAL) KP(LEFT_BRACKET) KP(RIGHT_BRACKET) XXX
    XXX KP(N6) KP(N7) MT(LSHFT,N8) MT(LCTRL,N9) LT_SYS(N0)   AS(BSLH) MT(RCMD,UNDERSCORE) MT(RALT,PLUS) KP(LBRC) KP(RBRC) XXX
    XXX KP(EXCL) KP(AT) KP(HASH) KP(DLLR) KP(PRCNT)          KP(CARET) KP(AMPS) KP(KP_MULTIPLY) KP(LPAR) KP(RPAR) XXX
    ___ ___ ___                                              MT_HYPER(LG(SPACE)) ___ ___
)

ZMK_LAYER(arrow,
    XXX AS(F1) AS(F2) AS(F3) AS(F4) AS(F5)                XXX KP(HOME) KP(UP) KP(END) XXX XXX
    XXX AS(F6) AS(F7) MT(LSHFT,F8) MT(LCTRL,F9) AS(F10)   &smart_shft KP(LEFT) KP(DOWN) KP(RIGHT) XXX XXX
    XXX AS(F11) AS(F12) AS(F13) AS(F14) AS(F15)           XXX KP(PG_UP) XXX KP(PG_DN) XXX XXX
    ___ ___ MT_HYPER_MOUSE                                ___ ___ ___
)

ZMK_LAYER(sys,
    XXX  _BT_SEL_KEYS_                    XXX XXX XXX XXX XXX XXX
    XXX XXX XXX XXX XXX XXX               KP(C_PP) KP(C_PREV) KP(C_NEXT) XXX XXX XXX
    XXX XXX XXX XXX XXX XXX               KP(K_MUTE) KP(C_VOL_DN) KP(C_VOL_UP) KP(C_BRI_DN) KP(C_BRI_UP) XXX
    &out OUT_TOG &sys_reset &bootloader   &bootloader &sys_reset XXX
)

#if ENABLE_MOUSE
    ZMK_LAYER(mouse,
        XXX XXX XXX XXX XXX XXX   XXX U_LCLK &u_up U_RCLK XXX XXX
        XXX XXX XXX XXX XXX XXX   XXX &u_left &u_down &u_right XXX XXX
        XXX XXX XXX XXX XXX XXX   XXX XXX XXX XXX XXX XXX
        XXX KP(LGUI) XXX          XXX XXX XXX
    )
#endif

