/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <16 19>; // FJ
            bindings = <&caps_word>;
        };
    };
};

/ {
  
  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTOSHIFT_HOLD_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      bindings = <&shifted>, <&kp>;
    };
	};

  macros {
    shifted: macro_shifted_kp {
      #binding-cells = <1>;
      label = "MACRO_SHIFTED_KP";
      compatible = "zmk,behavior-macro-one-param";
      bindings =
        <&macro_press &kp LSHFT>,
        <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
        <&macro_release &kp LSHFT>;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KP";
      bindings =
        <&macro_press>,
        <&macro_param_1to1>,
        <&macro_param_1to2>,
        <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_release>,
        <&macro_param_1to1>,
        <&macro_param_1to2>,
        <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
    };
  };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &lt 3 ESC           &as Q &as W &as E &as R &as T    &as Y &as U &as I &as O &as P &as BSLH
   &mt LSHIFT TAB      &as A &as S &as D &as F &as G    &as H &as J &as K &as L &as SEMI &as SQT 
   &mt LCTRL LC(SPACE) &as Z &as X &as C &as V &as B    &as N &as M &as COMMA &as DOT &as FSLH &mt RSHIFT RET
                   &mt LALT TAB &mt LGUI LC(SPACE) &lt 1 SPACE    &lt 2 RET &mt RCTRL ESC  &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans  &kp N1   &kp N2  &kp N3   &kp N4   &kp N5      &kp GRAVE  &kp MINUS  &kp EQUAL &kp LBKT   &kp RBKT  &kp BSPC
   &trans  &kp N6   &kp N7  &kp N8   &kp N9   &kp N0      &kp TILDE  &kp UNDER  &kp PLUS  &kp LBRC   &kp RBRC  &trans
   &trans     &kp EXCL &kp AT  &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS   &kp KP_MULTIPLY &kp LPAR   &kp RPAR  &trans
                               &trans   &trans   &trans   &trans &trans     &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &trans &kp F1 &kp F2 &kp F3 &kp F4 &kp F5               &kp HOME &kp PG_DN &kp PG_UP &kp END &trans &trans      
   &trans &kp F6 &kp F7 &kp F8 &kp F9 &kp F10              &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &trans &kp F11 &kp F12 &trans &trans &trans             &trans   &trans   &trans &trans    &trans &trans
                     &trans   &trans   &trans   &trans &trans     &trans
                        >;
                };

                media_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &trans &trans &trans &trans &trans &trans      &kp C_PP &kp C_PREV &kp C_NEXT &trans &trans &trans
   &trans &trans &trans &trans &trans &trans      &kp K_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_UP &kp C_BRI_DN &trans
               &sys_reset &bootloader &trans      &sys_reset &bootloader &trans
                        >;
                };

                micro_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans                      &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &kp LG(LS(N4)) &kp LG(LS(N5))      &trans &trans &trans &trans &trans &trans
   &trans &trans &trans &trans &trans &trans                      &trans &trans &trans &trans &trans &trans
                        &trans &trans &trans                      &trans &trans &trans
                        >;
                };
        };
};
