#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* activate bluetooth */
#define CONFIG_WIRELESS 1

#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "combos.dtsi"

/* Global settings */

&sk {  // sticky-key config
    release-after-ms = <3000>;
    quick-release;             // no double capitalization when rolling keys
};

&lt {
    flavor = "hold-preferred";
};

&caps_word {
    /delete-property/ ignore-modifiers;
};

&led_strip {
    // chain-length = <21>;
};

&nice_view_spi {
    // cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

// ZMK_CONDITIONAL_LAYER(1 2, 4)

#define MAKE_HT(name, first_bind) \
    ZMK_BEHAVIOR(name, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <200>; \
        require-prior-idle-ms = <125>; \
        bindings = <first_bind>, <&kp>; \
    )

#define MAKE_MT(name, second_bind) \
    ZMK_BEHAVIOR(name, hold_tap, \
        flavor = "hold-preferred"; \
        tapping-term-ms = <200>; \
        bindings = <&kp>, <second_bind>; \
    )

MAKE_HT(as_ht, &shifted)
MAKE_HT(ht, &no_re)
MAKE_HT(ht_cap, &caps_word)
MAKE_MT(mt_smart_shft, &smart_shft)

ZMK_BEHAVIOR(shifted, macro_one_param,
    bindings = 
      <&macro_press>,
      <&kp LSHFT &macro_param_1to1>,
      <&macro_tap>,
      <&kp MACRO_PLACEHOLDER>,
      <&macro_release>,
      <&kp LSHFT>;
)

ZMK_BEHAVIOR(as, macro_one_param,
    bindings = 
      <&macro_press>,
      <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
      <&macro_pause_for_release>,
      <&macro_release>,
      <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
)

ZMK_BEHAVIOR(as, macro_one_param,
    bindings = 
      <&macro_press>,
      <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
      <&macro_pause_for_release>,
      <&macro_release>,
      <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
)

ZMK_BEHAVIOR(no_re, macro_one_param,
    bindings = 
      <&macro_param_1to1>,
      <&macro_tap>,
      <&kp MACRO_PLACEHOLDER>;
)

#define MAKE_HT_PAIR(NAME, R_KEY, L_KEY) \
    ZMK_BEHAVIOR(p_ ## NAME, macro, bindings = <&kp R_KEY &kp L_KEY>;) \
    MAKE_HT(ht_ ## NAME, &p_ ## NAME)

MAKE_HT_PAIR(bkt, RBKT, LBKT)
MAKE_HT_PAIR(brc, RBRC, LBRC)
MAKE_HT_PAIR(par, RPAR, LPAR)

#define HT_BKT &ht_bkt 0 RBKT
#define HT_BRC &ht_brc 0 RBRC
#define HT_PAR &ht_par 0 RPAR

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

/*                KEY POSITIONS

  ╭─────────────────────╮ ╭─────────────────────╮
  │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
  │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
  │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ LH2 LH1 LH0 │ │ RH0 RH1 RH2 ╭───────╯
          ╰─────────────╯ ╰─────────────╯ */

// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#undef COMBO_TERM
#define COMBO_TERM 20

ZMK_COMBO(bkt, HT_BKT, RT1 RT2, 0)
ZMK_COMBO(brc, HT_BRC, RM1 RM2, 0)
ZMK_COMBO(par, HT_PAR, RB1 RB2, 0)
ZMK_COMBO(sqt, &kp SQT, LT1 LT2, 0)
ZMK_COMBO(dqt, &kp DQT, LM1 LM2, 0)

#define XXX &none
#define ___ &trans
#define AS(key) &as key
#define KP(key) &kp key
#define MT(mod_key,tap_key) &mt mod_key tap_key
#define LT_1(tap_key) &lt 1 tap_key
#define LT_2(tap_key) &lt 2 tap_key
#define LT_3(tap_key) &lt 3 tap_key
#define HYPER &ht_cap 0 LG(LA(LCTRL))
#define MT_SMART_SHFT(mod_key) &mt_smart_shft mod_key 0 

ZMK_LAYER(base,
    XXX AS(Q) AS(W) AS(E) AS(R) AS(T)              AS(Y) AS(U) AS(I) AS(O) AS(P) XXX
    XXX AS(A) AS(S) AS(D) AS(F) AS(G)              AS(H) AS(J) AS(K) AS(L) AS(SEMI) XXX
    XXX AS(Z) AS(X) AS(C) AS(V) AS(B)              AS(N) AS(M) AS(COMMA) AS(DOT) AS(FSLH) XXX
    MT(LALT,TAB) MT_SMART_SHFT(LGUI) LT_1(SPACE)   LT_2(ENTER) MT(RCTRL,ESC) KP(BSPC)
)

ZMK_LAYER(lower,
    XXX KP(N1) KP(N2) KP(N3) KP(N4) KP(N5)                 AS(GRAVE) KP(MINUS) KP(EQUAL) KP(LEFT_BRACKET) KP(RIGHT_BRACKET) XXX
    XXX KP(N6) KP(N7) MT(LSHFT,N8) MT(LCTRL,N9) LT_3(N0)   AS(BSLH) MT(RCMD,UNDERSCORE) MT(RALT,PLUS) KP(LBRC) KP(RBRC) XXX
    XXX KP(EXCL) KP(AT) KP(HASH) KP(DLLR) KP(PRCNT)        KP(CARET) KP(AMPS) KP(KP_MULTIPLY) KP(LPAR) KP(RPAR) XXX
    ___ ___ HYPER                                          HYPER ___ ___
)

ZMK_LAYER(raise,
    XXX AS(F1) AS(F2) AS(F3) AS(F4) AS(F5)                XXX KP(HOME) KP(UP) KP(END) XXX XXX
    XXX AS(F6) AS(F7) MT(LSHFT,F8) MT(LCTRL,F9) AS(F10)   &smart_shft KP(LEFT) KP(DOWN) KP(RIGHT) XXX XXX
    XXX AS(F11) AS(F12) AS(F13) AS(F14) AS(F15)           XXX KP(PG_UP) XXX KP(PG_DN) XXX XXX
    ___ ___ HYPER                                         HYPER ___ ___
)

ZMK_LAYER(media,
    XXX  _BT_SEL_KEYS_           XXX XXX XXX XXX XXX XXX
    XXX XXX XXX XXX XXX XXX      KP(C_PP) KP(C_PREV) KP(C_NEXT) XXX XXX XXX
    XXX XXX XXX XXX XXX XXX      KP(K_MUTE) KP(C_VOL_DN) KP(C_VOL_UP) KP(C_BRI_DN) KP(C_BRI_UP) XXX
    XXX &sys_reset &bootloader   &bootloader &sys_reset XXX
)